Given a string S and a string T, find the minimum window in S which will contain all the characters in T in linear time complexity.
Note that when the count of a character C in T is N, then the count of C in minimum window in S should be at least N.

Example :

S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC"

 Note:
If there is no such window in S that covers all characters in T, return the empty string ''.
If there are multiple such windows, return the first occurring minimum window ( with minimum start index ).

Solution:


string Solution::minWindow(string A, string B) {
     int hash_str[255] = {0}, hash_pat[255] = {0};
    int n = A.length(), m = B.length();
    int len = INT_MAX, s = -1;
    
    for(int i = 0; i < m; i++)
        hash_pat[B[i]]++;
    int i = 0, j = 0, count = 0;
    for(j = 0; j < n; j++){
        hash_str[A[j]]++;
        
        if(hash_pat[A[j]] != 0 && hash_str[A[j]] <= hash_pat[A[j]])
            count++;
        if(count == m){
            while(hash_pat[A[i]] == 0 || hash_str[A[i]] > hash_pat[A[i]]){
                hash_str[A[i]]--;
                i++;
            }
            if(len > j - i + 1)
                len = j - i + 1, s = i;
        }
    }
    return s == -1 ? "" : A.substr(s, len);
    
}


