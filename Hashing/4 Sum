Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

 Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
Example :
Given array S = {1 0 -1 0 -2 2}, and target = 0
A solution set is:

    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    (-1,  0, 0, 1)
Also make sure that the solution set is lexicographically sorted.
Solution[i] < Solution[j] iff Solution[i][0] < Solution[j][0] OR (Solution[i][0] == Solution[j][0] AND ... Solution[i][k] < Solution[j][k])


Solution:

vector<vector<int> > Solution::fourSum(vector<int> &nums, int target) {
    int n=nums.size();
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-3;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n-2;j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue;
                int l=j+1,h=n-1;
                while(l<h){
                    if(nums[i]+nums[j]+nums[l]+nums[h]==target){
                        ans.push_back({nums[i],nums[j],nums[l],nums[h]});
                        while(l+1<h-1 && nums[l]==nums[l+1] && nums[h]==nums[h-1]){
                        l++;
                        h--;
                    }
                        l++;
                        h--;
                    }
                    else if(nums[i]+nums[j]+nums[l]+nums[h]>target) h--;
                    else l++;
                }
            }
        }
        return ans;
}
