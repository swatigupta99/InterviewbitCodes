Problem Description

Given a string A consisting of lowercase characters.

You have to find the number of substrings in A which starts with vowel and end with consonants or vice-versa.

Return the count of substring modulo 109 + 7.



Problem Constraints
1 <= |A| <= 105

A consists only of lower-case characters.



Input Format
First argument is an string A.



Output Format
Return a integer denoting the the number of substrings in A which starts with vowel and end with consonants or vice-versa with modulo 109 + 7.



Example Input
Input 1:

 A = "aba"
Input 2:

 A = "a"


Example Output
Output 1:

 2
Output 2:

 0
 
 
 Solution:
 
 bool isvowel (char x)
{
  if (x=='a'or x=='e' or x=='i' or x=='o' or x=='u')
  {
      return true;
      
  }
  else
  {
      return false;
  }
}
void spstr (String A)
{
    vector <int> vowel_count;
    vector <int> nonvowel_count;
    int count1=0;
    int count2=0;
    for (inti=0;i<A.size();i++)
    {
        if (isvowel(A[i]))
        {
            count1++;
        }
        else
        {
            count2++;
        }
        vowel_count.push_back(count1);
        nonvowel_count.push_back(count2);
        
    }
    
}
int Solution::solve(string A) {
    int n = A.size();
    vector <int> vowel_count;
    vector <int> nonvowel_count;
    int count = 0;
    for (inti=0;i<n;i++)
    {
        if (isvowel(A[i]))
        {
            count = count + [nonvowel_count[n-1] - nonvowel_count[i]];
        }
        else
        {
           count = count + [vowel_count[n-1] - vowel_count[i]]; 
        }
    }
    return count;
    
    
}

