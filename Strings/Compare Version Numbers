Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4


Solution:

int Solution::compareVersion(string A, string B) {
    int vn1=0 , vn2=0;
    for (int i = 0 , j=0 ; (i<A.length() || j<B.length()) ;)
    {
        while (i<A.length() && A[i] != '.')
        {
            vn1 = (vn1 * 10 + (A[i] - '0'));
            i++;
        }
        while (j<B.length() && B[j] != '.')
        {
            vn2 = (vn2 * 10 + (B[j] - '0'));
            j++;
        }
        if (vn1 > vn2)
        {
            return 1;
            
        }
        if (vn2 > vn1)
        {
            return -1;
        }
        vn1 = vn2 = 0;
        i++;
        j++;
    }
    return 0;
}
