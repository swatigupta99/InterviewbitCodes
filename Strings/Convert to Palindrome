Given a string A consisting only of lowercase characters, we need to check whether it is possible to make this string a palindrome after removing exactly one character from this.

If it is possible then return 1 else return 0.



Problem Constraints
3 <= |A| <= 105

A[i] is always a lowercase character.



Input Format
First and only argument is an string A.



Output Format
Return 1 if it is possible to convert A to palindrome by removing exactly one character else return 0.



Example Input
Input 1:

 A = "abcba"
Input 2:

 A = "abecbea"


Example Output
Output 1:

 1
Output 2:

 0


Solution:

bool ispalindrome (string:: iterator low , string:: iterator high)
{
    while(low<high)
    {
        if (*low != *high)
        {
            return false;
            low++;
            high--;
        }
    }
    return true;
}
int Solution::solve(string A) {
    int low =0;
    int high= A.length()-1;
    while (low<high)
    {
        if (A[low]==A[high])
        {
            low++;
            high--;
        }
        else
        {
            if (ispalindrome(A.begin()+low + 1 , A.begin()+ high))
            {
                return 1;
            }
            if (ispalindrome(A.begin()+low , A.begin()+ high - 1))
            {
                return 1;
            }
        }
        return 1;
    }
    return 0;
    
      
    
}
