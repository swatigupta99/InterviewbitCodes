Given inorder and postorder traversal of a tree, construct the binary tree.

 Note: You may assume that duplicates do not exist in the tree. 
Example :

Input : 
        Inorder : [2, 1, 3]
        Postorder : [2, 3, 1]

Return : 
            1
           / \
          2   3

Solution:

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* constructBT(vector<int> &A, vector<int> &B,int is,int ie,int ps,int pe)
{
    if(is>ie || ps>pe) return NULL;
    int rootdata=B[pe];
    int index=-1;
    for(int i=is;i<=ie;i++)
    {
        if(A[i]==rootdata)
        {
            index=i;
            break;
        }
    }
    int len=index-is;
    TreeNode* root = new TreeNode(rootdata);
    root->left=constructBT(A,B,is,index-1,ps,ps+len-1);
    root->right=constructBT(A,B,index+1,ie,ps+len,pe-1);
    return root;
}
 
 
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    return constructBT(A,B,0,A.size()-1,0,B.size()-1);
}
