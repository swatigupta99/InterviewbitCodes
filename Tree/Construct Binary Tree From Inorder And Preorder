Given preorder and inorder traversal of a tree, construct the binary tree.

 Note: You may assume that duplicates do not exist in the tree. 
Example :

Input :
        Preorder : [1, 2, 3]
        Inorder  : [2, 1, 3]

Return :
            1
           / \
          2   3


Solution:

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 TreeNode * constructBT(vector<int>&A,vector<int>&B,int si,int ei,int &d)
 {
     if(si>ei) return NULL;
     int rootData=A[d];
     int mid;
     for(int i=si;i<=ei;i++)
     {
         if(B[i]==rootData)
         {
             mid=i;
             break;
         }
     }
     d++;
     TreeNode * root= new TreeNode(rootData);
     root->left=constructBT(A,B,si,mid-1,d);
     root->right=constructBT(A,B,mid+1,ei,d);
     return root;
 }
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    int d=0;
      return constructBT(A,B,0,A.size()-1,d);
}
