Given a sorted integer array A of size n which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.
Note : If array size is even, take first mid as root.
Input format :

Line 1 : Integer n (Size of array)
Line 2 : Array elements (separated by space)

Output Format :

BST elements (in pre order traversal, separated by space)

Sample Input :

7
1 2 3 4 5 6 7

Sample Output :

4 2 1 3 6 5 7

Solution:


BinaryTreeNode<int>* Tree(int *input, int si, int ei) {
    if(si > ei) {
        return NULL;
    }
    
    int rootIndex = (si + ei) / 2;
    int rootData = input[rootIndex];
    
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    root -> left = Tree(input, si, rootIndex - 1);
    root -> right = Tree(input, rootIndex + 1, ei);
    
    return root;
}

BinaryTreeNode<int>* constructTree(int *input, int n) {
    

    if(n < 1) {
        return NULL;
    }
    
    return Tree(input, 0, n - 1);
}
