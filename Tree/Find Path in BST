Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST). Return null otherwise.
Assume that BST contains all unique elements.
Input Format :

Line 1 : Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 2 : Integer k

Output Format :

Path from node k to root

Sample Input :

8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2

Sample Output :

2
5
8



Solution:

vector<int>* findPath(BinaryTreeNode<int> *root , int data){
    

    if(root == NULL) {
        return NULL;
    }
    
    if(root -> data == data) {
        vector<int>* output = new vector<int>();
        output -> push_back(root -> data);
        return output;
    }
    
    vector<int>* LeftOutput = findPath(root -> left, data);
    if(LeftOutput != NULL) {
        LeftOutput -> push_back(root -> data);
        return LeftOutput;
    }
    
    vector<int>* RightOutput = findPath(root -> right, data);
    if(RightOutput != NULL) {
        RightOutput -> push_back(root -> data);
        return RightOutput;
    }
    else {
        return NULL;
    }
}
