Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

Example :

    1
   / \
  2   2
 / \ / \
3  4 4  3
The above binary tree is symmetric.
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Return 0 / 1 ( 0 for false, 1 for true ) for this problem



Solution:

bool check(TreeNode *A,TreeNode *B)
{
    if(A==NULL && B==NULL)
        return true;
    else if(A==NULL || B==NULL)
        return false;
    else if(A->val!=B->val)
        return false;
    else if(!check(A->right,B->left) || !check(A->left,B->right))
        return false;
    else
        return true;
}
int Solution::isSymmetric(TreeNode* A) {
    return check(A->left,A->right);
    
    
    
