Given two Binary Trees A and B, you need to merge them in a single binary tree.

The merge rule is that if two nodes overlap, then sum of node values is the new value of the merged node.

Otherwise, the non-null node will be used as the node of new tree.



Problem Constraints
1 <= Number of Nodes in A , B <= 105



Input Format
First argument is an pointer to the root of binary tree A.

Second argument is an pointer to the root of binary tree B.



Output Format
Return a pointer to the root of new binary tree.



Example Input
Input 1:

 A =   2

      / \

     1   4

    /

   5


B =   3
      / \
      6  1
      \   \
       2   7

Input 2:

 A =   12

      / \

     11  14            


B =   3
      / \
      6  1



Example Output
Output 1:

     5
    / \
   7   5
  / \   \ 
 5   2   7
Output 2:

   15
  / \
 17  15



Solution:

void merge(TreeNode* A,TreeNode* B){
    
    if(A && B)
        A->val += B->val; 
    
    if(A->left && B->left)
        merge(A->left,B->left);
    else if(!A->left && B->left)
        A->left = B->left;
        
    if(A->right && B->right)
        merge(A->right,B->right);
    else if(!A->right && B->right)
        A->right = B->right;
    
    delete(B);

    
}
TreeNode* Solution::solve(TreeNode* A, TreeNode* B) {
    if(!A && B) return B;
    if(A&&!B) return A;
    if(!A && !B) return NULL;
    merge(A,B);
    return A;
}
