Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

Example :

Input : 

                  ______
                 |     |
                 \/    |
        1 -> 2 -> 3 -> 4

Return the node corresponding to node 3. 

Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::detectCycle(ListNode* A) {
    ListNode *slow = A;
    ListNode *fast = A;
    
    while (fast->next != NULL && fast->next->next != NULL)
    {
        
        
        slow = slow->next;
        fast = fast->next->next;
        if (slow = fast)
        {
            return slow;
        }
    }

}
