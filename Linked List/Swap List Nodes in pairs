Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


Solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::swapPairs(ListNode* A) {
    ListNode *temp = A;
    int count =0;
    while(temp)
    {
        temp = temp->next;
        count++;
    }
    temp = A;
   
    while (temp->next != NULL && temp->next->next != NULL)
    {
        int a = temp->val;
        temp->val= temp->next->val;
        temp->next->val = a;
        temp = temp->next->next;
    }
    
    if (count%2 == 0)
    {
        int b = temp->val;
        temp->val= temp->next->val;
        temp->next->val = b;
    }
    
    
    
    return A;
}
