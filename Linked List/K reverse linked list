Given a singly linked list and an integer K, reverses the nodes of the

list K at a time and returns modified linked list.

 NOTE : The length of the list is divisible by K 
Example :

Given linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 and K=2,

You should return 2 -> 1 -> 4 -> 3 -> 6 -> 5


Solution :


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseList(ListNode* A, int B) {
    ListNode *temp = A;
    ListNode *prev = A;
    stack <int> s;
    while (temp)
    {
        for (int i =1 ; i<= B ; i++)
        {
            s.push(temp->val);
            temp=temp->next;
        }
        for (int i =1 ; i<= B ; i++)
        {
            prev->val = s.top();
            prev = prev->next;
            s.pop();
        }
        prev = temp;
        
        
    }
    return A;

}
