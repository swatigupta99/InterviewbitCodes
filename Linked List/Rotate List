Given a list, rotate the list to the right by k places, where k is non-negative.

For example:

Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.



Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::rotateRight(ListNode* A, int B) {
    ListNode *head1 = new ListNode(0);
    ListNode *temp1 = head1;
    ListNode *temp = A;
    int count=0;
    
    while (temp)
    {
        temp=temp->next;
        count++;
    }
    temp = A;
    if (B>count)
    {
    
        int index = B%count;
       for(int i = 1 ; i<= (count-index) ; i++)
        {
            temp=temp->next;
        }
        temp1->next = temp;
        while (temp1->next != NULL )
        {
            temp1 = temp1->next;
        }
        temp1->next = A;
        for(int i = 1 ; i<= (count-index) ; i++)
        {
            temp1=temp1->next;
        }
        temp1->next = NULL;
        
    }
    else
    {
        for(int i = 1 ; i<= (count-B) ; i++)
        {
            temp=temp->next;
        }
        temp1->next = temp;
        while (temp1->next != NULL )
        {
            temp1 = temp1->next;
        }
        temp1->next = A;
        for(int i = 1 ; i<= (count-B) ; i++)
        {
            temp1=temp1->next;
        }
        temp1->next = NULL;
    }    
    
    return head1->next;
    
}
