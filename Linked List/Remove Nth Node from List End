Given a linked list, remove the nth node from the end of list and return its head.

For example,
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.

 Note:
If n is greater than the size of the list, remove the first node of the list.




Solution :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::removeNthFromEnd(ListNode* A, int B) {
    int count =0;
    ListNode *temp = A;
    while (temp!= NULL)
    {
        
        temp=temp->next;
        count++;
        
    }

    temp = A;
    
    if (count == 1)
    {
        return NULL;
    }
    if (B >= count)
    {
        return A->next;
    }
    for (int i =1 ; i< (count-B) ;i++)
    {
        temp=temp->next;
    }
    temp->next=temp->next->next;
    return A;
    
    
}

