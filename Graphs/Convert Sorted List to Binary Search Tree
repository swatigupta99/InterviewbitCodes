Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

 A height balanced BST : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Example :


Given A : 1 -> 2 -> 3
A height balanced BST  :

      2
    /   \
   1     3




Solution:

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
TreeNode* Solution::sortedListToBST(ListNode* A) {
    if(A == nullptr){
        return nullptr;
        }
    auto f = A->next;
    auto s = A;
    ListNode *temp = nullptr;
    while (f and f->next){
        f = f->next->next;
        temp = s;
        s = s->next;
    }
    
    TreeNode *r = new TreeNode (s->val);
    if(pr != nullptr){
        pr->next = nullptr;
        }
    if(A != s){
        r->left = sortedListToBST (A);
        }
    r->right = sortedListToBST (s->next);
    return r;
    
}
 
