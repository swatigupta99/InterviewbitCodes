Given a undirected tree with N nodes labeled from 1 to N.

Each node has a certain weight assigned to it given by an integer array A of size N.

You need to delete an edge in such a way that Product between sum of weight of nodes in one subtree with sum of weight of nodes in other subtree is maximized.

Return this maximum possible product modulo 109 + 7.

NOTE:

The tree is rooted at node labeled with 1.


Problem Constraints
2 <= N <= 105

1 <= A[i] <= 103



Input Format
First argument is an integer array A of size N denoting the weight of each node.

Second argument is a 2-D array B of size (N-1) x 2 denoting the edge of the tree.



Output Format
Return a single integer denoting the maximum product prossible of sum of weights of nodes in the two subtrees formed by deleting an edge with modulo 109 + 7.



Example Input
Input 1:

 A = [10, 5, 12, 6]
 B = [

        [1, 2]
        [1, 4]
        [4, 3]
     ]
Input 2:

 A = [11, 12]
 B = [

        [1, 2]
     ]


Example Output
Output 1:

 270
Output 2:

 132
 
 
 
 Solution:
 
 int Solution::deleteEdge(vector<int> &A, vector<vector<int> > &B) {
    long long int sum=0;
    long long int mod = 1e9+7;
    long long int ans =0;
    vector<int>P(A.size()+1,-1);
    vector<bool>leaf(A.size()+1,true);
    for(int i=0;i<A.size();++i){
        sum=sum+A[i];
    }
    for(int i=0;i<B.size();++i){
        int m =max(B[i][0],B[i][1]);
        int n= min(B[i][0],B[i][1]);
        P[m]=n;
        leaf[n]=false;
    }
    long long int cursum =0;
    vector<int>W(A.size()+1,0);
    for(int i=1;i<=A.size();++i){
            int val = A[i-1];
            for(int ind =i;ind!=-1;ind=P[ind])
               W[ind]+=val;
        
    }
 
    for(int i=2;i<=A.size();++i){

                cursum=W[i];

                ans = max(ans, (cursum*(sum-cursum))%mod);
            }
    
    return (int)ans;
    
    
    
}

