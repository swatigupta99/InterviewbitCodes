Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].

Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.

NOTE:

The cycle must contain atleast two nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.


Problem Constraints
2 <= A <= 105

1 <= M <= min(200000,A(A-1))

1 <= B[i][0], B[i][1] <= A



Input Format
The first argument given is an integer A representing the number of nodes in the graph.

The second argument given a matrix B of size M x 2 which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].



Output Format
Return 1 if cycle is present else return 0.



Example Input
Input 1:

 A = 5
 B = [  [1, 2] 
        [4, 1] 
        [2, 4] 
        [3, 4] 
        [5, 2] 
        [1, 3] ]
Input 2:

 A = 5
 B = [  [1, 2]
        [2, 3] 
        [3, 4] 
        [4, 5] ]


Example Output
Output 1:

 1
Output 2:

 0


Solution:


bool Cycle(int cur, vector<vector<int>>&adj, vector<bool>&visited, vector<bool>&recVisited){
    visited[cur] = true;
    recVisited[cur] = true;
    
    for(auto itr: adj[cur]){
        if(!visited[itr]){
            if(Cycle(itr, adj, visited, recVisited))return true;
        }
        
        else if(recVisited[itr]){
            return true;
        }
    }
    recVisited[cur] = false;
    return false;
}
int Solution::solve(int A, vector<vector<int> > &B) {
    
    vector<vector<int>>adj(A+1);
    for(int i = 0; i < B.size(); ++i){
        adj[B[i][0]].push_back(B[i][1]);
    }
    vector<bool>visited(A+1);
    vector<bool>recVisited(A+1);
    
    for(int i = 1; i <= A; ++i){
        if(!visited[i]){
            if(Cycle(i, adj, visited, recVisited)){
                return true;
            }
        }
    }
    return false;
}
