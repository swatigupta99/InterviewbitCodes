Rishabh has a permutation A of N integers 1, 2, ... N but he doesn't like it. Rishabh wants to get a permutation B.

Also, Rishabh has some M good pairs given in a form of 2D matrix C of size M x 2  where (C[i][0], C[i][1]) denotes that two indexes of the permutation A.

In one operation he can swap Ax and Ay only if (x, y) is a good pair.

You have to tell whether Rishabh can obtain permutation B by performing the above operation any number of times on permutation A.

If the permutation B can be obtained return 1 else return 0.



Problem Constraints
2 <= N <= 105
1 <= M <= 105
1 <= A[i], B[i] <= N
A[i] and B[i] are all distinct.
1 <= C[i][0] < C[i][1] <= N


Input Format
First arguement is an integer array A of size N denoting the permutation A.

Second arguement is an integer array B of size N denoting the permutation B.

Third argument is an 2D integer array C of size M x 2 denoting the M good pairs.



Output Format
If the permutation B can be obtained return 1 else return 0.



Example Input
Input 1:

 A = [1, 3, 2, 4]
 B = [1, 4, 2, 3]
 C = [ 
        [3, 4]
     ]
Input 2:

 A = [1, 3, 2, 4]
 B = [1, 4, 2, 3]
 C = [
        [2, 4]
     ] 


Example Output
Output 1:

 0
Output 2:

 1



Solution:


bool dfs(int x, int y, vector<vector<int>> &adj, vector<bool> &vis)
{
    if (x==y) return true;
    vis[x]=true;
    for (auto i:adj[x])
    {
        if (!vis[i] and dfs(i,y,adj,vis)){
          return true;
          }
    }
    return false;
}
int Solution::solve(vector<int> &A, vector<int> &B, vector<vector<int> > &C) 
{
    int n=A.size();
    vector<vector<int>> adj(n+1);
    
    for (auto edge:C)
    {
        int x=edge[0]-1;
        int y=edge[1]-1;
        adj[A[x]].push_back(A[y]);
        adj[A[y]].push_back(A[x]);
    }
    for (int i=0;i<n;i++)
    {
        if (B[i]==A[i]) continue;
        vector<bool> vis(n+1,false);
        if (!dfs(B[i],A[i],adj,vis)) {
          return false;
        }
    }
    return true;
}
