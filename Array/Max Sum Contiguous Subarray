Find the contiguous subarray within an array, A of length N which has the largest sum.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the maximum possible sum of the contiguous subarray.
Constraints:

1 <= N <= 1e6
-1000 <= A[i] <= 1000
For example:

Input 1:
    A = [1, 2, 3, 4, -10]

Output 1:
    10


Input 2:
    A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

Output 2:
    6
Solution:

int Solution::maxSubArray(const vector<int> &A) {
    int n = A.size();
    int i , men=0 , msf = INT_MIN;
    for (i=0;i<n;i++)
    {
        men += A[i];
        if (men < A[i])
        {
            men = A[i];
        }
        if(msf<men)
        {
            msf=men;
        }
        
    }
    return msf;
    
    
}
