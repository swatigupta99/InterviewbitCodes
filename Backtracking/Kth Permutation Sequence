The set [1,2,3,â€¦,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3 ) :

1. "123"
2. "132"
3. "213"
4. "231"
5. "312"
6. "321"
Given n and k, return the kth permutation sequence.

For example, given n = 3, k = 4, ans = "231"


Solution:
int findFirstNumIndex(int& k, int n)
{
 
    if (n == 1)
        return 0;
    n--;
 
    int first_num_index;
    int n_partial_fact = n;
 
    while (k >= n_partial_fact && n > 1) {
        n_partial_fact = n_partial_fact * (n - 1);
        n--;
    }
    first_num_index = k / n_partial_fact;
 
    k = k % n_partial_fact;
 
    return first_num_index;
}


string Solution::getPermutation(int n, int k) {
    string ans = "";
 
    vector<int> v;
    for (int i = 1; i <= n; i++)
        v.push_back(i);
 
 
    
    k = k - 1;
 
    for (int i = 0; i < n; i++) {
 
        int index= findFirstNumIndex(k, n - i);
        ans += (to_string(v[index]));
        v.erase(v.begin() + index);
    }
    return ans;
}

