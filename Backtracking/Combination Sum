Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The combinations themselves must be sorted in ascending order.
CombinationA > CombinationB iff (a1 > b1) OR (a1 = b1 AND a2 > b2) OR … (a1 = b1 AND a2 = b2 AND … ai = bi AND ai+1 > bi+1)
The solution set must not contain duplicate combinations.
Example,
Given candidate set 2,3,6,7 and target 7,
A solution set is:

[2, 2, 3]
[7]


Solution:

void allcombinations(vector<int>&A , vector<vector<int>> &ans , vector<int> &temp , int i , int sum)
{
    if(sum<0)
    {
        return;
    }
    if (sum==0)
    {
        ans.push_back(temp);
        return;
    }
    
    while(i<A.size() && sum - A[i]>=0)
    {
        temp.push_back(A[i]);
        allcombinations(A , ans , temp , i , sum-A[i]);
        i++;
        temp.pop_back();
    }
}




vector<vector<int> > Solution::combinationSum(vector<int> &A, int sum) {
    sort(A.begin() , A.end());
    A.erase(unique(A.begin() , A.end()) , A.end());
    vector<vector<int>> ans;
    vector<int> temp;
    allcombinations(A , ans , temp , 0 , sum);
    return ans;
}


