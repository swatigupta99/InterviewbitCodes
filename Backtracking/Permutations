Given a collection of numbers, return all possible permutations.

Example:

[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]

Solution:

void allpermutations(vector<int>&A , vector<vector<int>>&ans , int index)
{
    if (index == A.size() - 1) {
            ans.push_back(A);
            return;
        } 
        for (int i = index; i < A.size(); i++) {
            swap(A[index], A[i]);
            allpermutations(A, ans , index +1);
            swap(A[index], A[i]);
        }
    

}






vector<vector<int> > Solution::permute(vector<int> &A) {
    vector<vector<int>> ans;
    int index= 0;
    if (A.size()==0)
    {
        return ans;
    }
    
    allpermutations(A, ans , 0);
    sort (A.begin() , A.end());
    return ans;
    
}
