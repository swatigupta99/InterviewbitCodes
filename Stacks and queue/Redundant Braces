Given a string A denoting an expression. It contains the following operators ’+’, ‘-‘, ‘*’, ‘/’.

Chech whether A has redundant braces or not.

Return 1 if A has redundant braces, else return 0.

Note: A will be always a valid expression.



Input Format

The only argument given is string A.
Output Format

Return 1 if string has redundant braces, else return 0.
For Example

Input 1:
    A = "((a + b))"
Output 1:
    1
    Explanation 1:
        ((a + b)) has redundant braces so answer will be 1.

Input 2:
    A = "(a + (a + b))"
Output 2:
    0
    Explanation 2:
        (a + (a + b)) doesn't have have any redundant braces so answer will be 0.
        
        
 Solution:
 
 
 int Solution::braces(string A) {
    stack<string>s1;
    for(int i=0; i<A.length();i++)
    {
        char x = A[i];
        if (x=='(' or (x>='a' and x<='z') or x=='+' or x=='-' or x=='*' or x=='/')
        {
            s1.push(x);
        }
        else 
        {
            int count = 0;
            while (s1.empty()==false and s1.top()!='(')
            {
                count++;
                s1.pop();
            }
            s1.pop();
            if (count>1)
            {
                continue;
            }
            else
            {
                return 1;
            }
        }
    }
    return 0;
}
